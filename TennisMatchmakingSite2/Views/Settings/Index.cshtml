@model TennisMatchmakingSite2.Models.SettingsViewModel
@{
    ViewData["Title"] = "Settings";
}

<div class="container mx-auto px-4 pb-20">
    <!-- Profile Settings Section -->
    <div class="max-w-2xl mx-auto mt-8">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-2xl font-bold mb-6">Profile Settings</h2>

            @if (TempData["SuccessMessage"] != null)
            {
            <div class="mb-4 p-4 bg-green-50 text-green-700 rounded-md">
                @TempData["SuccessMessage"]
            </div>
            }

            <div class="divide-y divide-gray-200">
                <!-- Username Section -->
                <div class="py-4">
                    <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('username-section')">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">Change your Username</h3>
                        </div>
                        <i class="fas fa-chevron-down transform transition-transform"></i>
                    </button>
                    <div id="username-section" class="accordion-content hidden mt-4">
                        @using (Html.BeginForm("UpdateName", "Settings", FormMethod.Post))
                        {
                        <div class="space-y-4">
                            <div>
                                @Html.LabelFor(m => m.Name, "New Username", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.TextBoxFor(m => m.Name, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Update Username
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>

                <!-- Email Section -->
                <div class="py-4">
                    <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('email-section')">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">Change your Email</h3>
                        </div>
                        <i class="fas fa-chevron-down transform transition-transform"></i>
                    </button>
                    <div id="email-section" class="accordion-content hidden mt-4">
                        @using (Html.BeginForm("UpdateEmail", "Settings", FormMethod.Post))
                        {
                        <div class="space-y-4">
                            <div>
                                @Html.LabelFor(m => m.Email, "New Email Address", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.TextBoxFor(m => m.Email, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Update Email
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>

                <!-- Password Section -->
                <div class="py-4">
                    <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('password-section')">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">Change your Password</h3>
                        </div>
                        <i class="fas fa-chevron-down transform transition-transform"></i>
                    </button>
                    <div id="password-section" class="accordion-content hidden mt-4">
                        @using (Html.BeginForm("UpdatePassword", "Settings", FormMethod.Post))
                        {
                        <div class="space-y-4">
                            <div>
                                @Html.LabelFor(m => m.CurrentPassword, "Current Password", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.PasswordFor(m => m.CurrentPassword, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.CurrentPassword, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div>
                                @Html.LabelFor(m => m.NewPassword, "New Password", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.PasswordFor(m => m.NewPassword, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.NewPassword, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div>
                                @Html.LabelFor(m => m.ConfirmNewPassword, "Confirm New Password", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.PasswordFor(m => m.ConfirmNewPassword, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.ConfirmNewPassword, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Update Password
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>

                <!-- Player Level Section -->
                <div class="py-4">
                    <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('player-level-section')">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">Change your Player Level</h3>
                        </div>
                        <i class="fas fa-chevron-down transform transition-transform"></i>
                    </button>
                    <div id="player-level-section" class="accordion-content hidden mt-4">
                        @using (Html.BeginForm("UpdatePlayerLevel", "Settings", FormMethod.Post))
                        {
                        <div class="space-y-4">
                            <div>
                                @Html.LabelFor(m => m.PlayerLevel, "Player Level", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.DropDownListFor(m => m.PlayerLevel,
                                    new SelectList(Enum.GetValues(typeof(PlayerLevel))),
                                    new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.PlayerLevel, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Update Player Level
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>

                <!-- Hometown Section -->
                <div class="py-4">
                    <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('hometown-section')">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">Change your Hometown</h3>
                        </div>
                        <i class="fas fa-chevron-down transform transition-transform"></i>
                    </button>
                    <div id="hometown-section" class="accordion-content hidden mt-4">
                        @using (Html.BeginForm("UpdateHometown", "Settings", FormMethod.Post))
                        {
                        <div class="space-y-4">
                            <div>
                                @Html.LabelFor(m => m.Hometown, "Hometown", new { @class = "block text-sm font-medium text-gray-700 mb-1" })
                                @Html.TextBoxFor(m => m.Hometown, new { @class = "block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500" })
                                @Html.ValidationMessageFor(m => m.Hometown, "", new { @class = "text-red-500 text-sm mt-1" })
                            </div>
                            <div class="flex justify-end">
                                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                    Update Hometown
                                </button>
                            </div>
                        </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Theme Settings Section -->
    <div class="max-w-2xl mx-auto mt-8">
        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            <h2 class="text-2xl font-bold mb-6">Customization</h2>

            <div class="py-4">
                <button class="accordion-trigger w-full flex justify-between items-center" onclick="toggleAccordion('theme-section')">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900">Change your Theme</h3>
                    </div>
                    <i class="fas fa-chevron-down transform transition-transform"></i>
                </button>
                <div id="theme-section" class="accordion-content hidden mt-4">
                    @using (Html.BeginForm("UpdateTheme", "Settings", FormMethod.Post))
                    {
                    <div class="grid grid-cols-2 gap-4">
                        <div class="col-span-2 mb-2">
                            <p class="text-sm text-gray-600 mb-4">Select a Grand Slam theme to customize your experience</p>
                        </div>

                        <div class="color-scheme-option @(Model.Theme == GrandSlamTheme.Wimbledon ? "border-green-500" : "border-gray-200")"
                             onclick="selectColorScheme(this, 'Wimbledon')">
                            <input type="radio" name="Theme" value="Wimbledon" class="hidden"
                                   @(Model.Theme == GrandSlamTheme.Wimbledon ? "checked" : "")>
                            <div class="bg-purple-100 rounded-lg p-4 cursor-pointer hover:bg-purple-50 transition-colors">
                                <h4 class="font-medium text-purple-800">Wimbledon</h4>
                                <p class="text-sm text-purple-600">Classic Green & Purple theme</p>
                            </div>
                        </div>

                        <div class="color-scheme-option @(Model.Theme == GrandSlamTheme.RolandGarros ? "border-orange-500" : "border-gray-200")"
                             onclick="selectColorScheme(this, 'RolandGarros')">
                            <input type="radio" name="Theme" value="RolandGarros" class="hidden"
                                   @(Model.Theme == GrandSlamTheme.RolandGarros ? "checked" : "")>
                            <div class="bg-orange-100 rounded-lg p-4 cursor-pointer hover:bg-orange-50 transition-colors">
                                <h4 class="font-medium text-orange-800">Roland Garros</h4>
                                <p class="text-sm text-orange-600">Clay & Green theme</p>
                            </div>
                        </div>

                        <div class="color-scheme-option @(Model.Theme == GrandSlamTheme.USOpen ? "border-blue-500" : "border-gray-200")"
                             onclick="selectColorScheme(this, 'USOpen')">
                            <input type="radio" name="Theme" value="USOpen" class="hidden"
                                   @(Model.Theme == GrandSlamTheme.USOpen ? "checked" : "")>
                            <div class="bg-blue-100 rounded-lg p-4 cursor-pointer hover:bg-blue-50 transition-colors">
                                <h4 class="font-medium text-blue-800">US Open</h4>
                                <p class="text-sm text-blue-600">Blue & Green theme</p>
                            </div>
                        </div>

                        <div class="color-scheme-option @(Model.Theme == GrandSlamTheme.AustralianOpen ? "border-yellow-500" : "border-gray-200")"
                             onclick="selectColorScheme(this, 'AustralianOpen')">
                            <input type="radio" name="Theme" value="AustralianOpen" class="hidden"
                                   @(Model.Theme == GrandSlamTheme.AustralianOpen ? "checked" : "")>
                            <div class="bg-blue-100 rounded-lg p-4 cursor-pointer hover:bg-blue-50 transition-colors">
                                <h4 class="font-medium text-blue-800">Australian Open</h4>
                                <p class="text-sm text-blue-600">Light blue & black theme</p>
                            </div>
                        </div>

                        <div class="col-span-2 mt-4">
                            <button type="submit" class="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                                Apply Theme
                            </button>
                        </div>
                    </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function toggleAccordion(sectionId) {
            const section = document.getElementById(sectionId);
            const button = section.previousElementSibling;
            const icon = button.querySelector('i');
            
            // Close all other sections in the same container
            const container = section.closest('.divide-y, .bg-white');
            container.querySelectorAll('.accordion-content').forEach(content => {
                if (content.id !== sectionId && !content.classList.contains('hidden')) {
                    content.classList.add('hidden');
                    const otherIcon = content.previousElementSibling.querySelector('i');
                    otherIcon.classList.remove('rotate-180');
                }
            });

            // Toggle current section
            section.classList.toggle('hidden');
            icon.classList.toggle('rotate-180');
        }

        function selectColorScheme(element, scheme) {
            // Remove selected class from all options
            document.querySelectorAll('.color-scheme-option').forEach(opt => {
                opt.classList.remove('selected');
                opt.classList.remove('border-green-500');
                opt.classList.remove('border-orange-500');
                opt.classList.remove('border-blue-500');
                opt.classList.remove('border-yellow-500');
                opt.classList.add('border-gray-200');
            });
            
            // Add selected class to clicked option
            element.classList.add('selected');
            switch(scheme) {
                case 'Wimbledon':
                    element.classList.add('border-green-500');
                    break;
                case 'RolandGarros':
                    element.classList.add('border-orange-500');
                    break;
                case 'USOpen':
                    element.classList.add('border-blue-500');
                    break;
                case 'AustralianOpen':
                    element.classList.add('border-yellow-500');
                    break;
            }
            
            // Check the radio button
            element.querySelector('input[type="radio"]').checked = true;

            // Apply theme immediately
            window.applyTheme(scheme);
        }

        // Initialize any opened sections
        document.addEventListener('DOMContentLoaded', function() {
            // Check if any section should be open based on URL hash
            const hash = window.location.hash;
            if (hash) {
                const sectionId = hash.substring(1);
                toggleAccordion(sectionId);
            }

            // Check current theme
            const currentTheme = '@Model.Theme.ToString()';
            const themeElement = document.querySelector(`input[value="${currentTheme}"]`)?.closest('.color-scheme-option');
            if (themeElement) {
                selectColorScheme(themeElement, currentTheme);
            }
        });
    </script>
}
