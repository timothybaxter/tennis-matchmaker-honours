@{
    ViewData["Title"] = "Player Profile";
    var profile = ViewBag.Profile;
    var stats = ViewBag.Stats;
    var isCurrentUser = ViewBag.IsCurrentUser;
    var isFriend = ViewBag.IsFriend ?? false;
    var hasPendingRequest = ViewBag.HasPendingRequest ?? false;
}

<style>
    /* Mobile-specific optimizations */
    @@media (max-width: 640px) {
        /* Force 2x2 grid on mobile view */
        .stats-grid,
        .player-info-grid {
            display: grid !important;
            grid-template-columns: 1fr 1fr !important;
            gap: 0.5rem !important;
        }

        /* Ensure correct spacing */
        .stats-container {
            margin-bottom: 1rem !important;
        }

        /* Fix expandable sections on mobile */
        .expandable-header {
            padding: 0.75rem !important;
        }

        .expandable-content {
            padding: 0.75rem !important;
        }

        /* More compact inner stats grid */
        .inner-stats-grid {
            display: grid !important;
            grid-template-columns: 1fr 1fr !important;
            gap: 0.5rem !important;
        }

        .inner-stats-item,
        .player-info-item {
            padding: 0.5rem !important;
        }

        /* Make player info more compact on mobile */
        .player-info-item p {
            margin-bottom: 0.25rem !important;
            line-height: 1.4 !important;
        }
    }
</style>

<div class="container mx-auto px-4 pb-20 pt-4 sm:pt-6">
    <div class="mt-2 sm:mt-4">
        @if (TempData["ErrorMessage"] != null)
        {
        <div class="bg-red-50 text-red-800 p-4 rounded-md mb-6">
            @TempData["ErrorMessage"]
        </div>
        }

        @if (TempData["SuccessMessage"] != null)
        {
        <div class="bg-green-50 text-green-800 p-4 rounded-md mb-6">
            @TempData["SuccessMessage"]
        </div>
        }

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
            <!-- Profile Header - More compact on mobile -->
            <div class="bg-gradient-to-r from-blue-500 to-purple-600 p-4 sm:p-6 text-white">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                    <div>
                        <h1 class="text-xl sm:text-2xl font-bold">@profile.Name</h1>
                        <p class="text-blue-100">@profile.PlayerLevel Player</p>
                    </div>
                    <div class="mt-3 sm:mt-0 flex flex-wrap gap-2">
                        @if (!isCurrentUser)
                        {
                            if (!isFriend && !hasPendingRequest)
                            {
                        <form asp-controller="Social" asp-action="AddFriend" method="post">
                            <input type="hidden" name="friendId" value="@profile.Id" />
                            <button type="submit" class="bg-white text-blue-600 px-3 py-1.5 text-sm sm:px-4 sm:py-2 rounded-md font-medium hover:bg-blue-50 transition-colors">
                                <i class="fas fa-user-plus mr-1"></i> Add Friend
                            </button>
                        </form>
                            }
                            else if (hasPendingRequest)
                            {
                        <button disabled class="bg-gray-200 text-gray-600 px-3 py-1.5 text-sm sm:px-4 sm:py-2 rounded-md font-medium cursor-not-allowed">
                            <i class="fas fa-clock mr-1"></i> Request Sent
                        </button>
                            }
                            else
                            {
                        <button disabled class="bg-green-100 text-green-700 px-3 py-1.5 text-sm sm:px-4 sm:py-2 rounded-md font-medium cursor-not-allowed">
                            <i class="fas fa-check mr-1"></i> Friends
                        </button>
                            }

                        <a href="@Url.Action("NewConversation", "Social", new { userId = profile.Id, userName = profile.Name })" class="bg-white text-blue-600 px-3 py-1.5 text-sm sm:px-4 sm:py-2 rounded-md font-medium hover:bg-blue-50 transition-colors">
                            <i class="fas fa-comment mr-1"></i> Message
                        </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Profile Content -->
            <div class="p-4 sm:p-6">
                <div class="grid grid-cols-1 gap-6">
                    <!-- Player Info - Now at the top on mobile -->
                    <div class="col-span-1">
                        <h2 class="text-lg font-semibold mb-4">Player Information</h2>
                        <div class="bg-gray-50 rounded-lg p-4">
                            <div class="player-info-grid grid grid-cols-2 gap-3">
                                @if (!string.IsNullOrEmpty(profile.Hometown))
                                {
                                <div class="player-info-item">
                                    <p class="text-sm text-gray-500">Hometown</p>
                                    <p class="font-medium">@profile.Hometown</p>
                                </div>
                                }
                                <div class="player-info-item">
                                    <p class="text-sm text-gray-500">Skill Level</p>
                                    <p class="font-medium">@profile.PlayerLevel</p>
                                </div>
                                <div class="player-info-item">
                                    <p class="text-sm text-gray-500">Member Since</p>
                                    <p class="font-medium">@profile.JoinedAt.ToString("MMM yyyy")</p>
                                </div>
                                <div class="player-info-item">
                                    <p class="text-sm text-gray-500">Last Active</p>
                                    <p class="font-medium">@profile.LastActive.ToString("MMM d, yyyy")</p>
                                </div>
                            </div>
                        </div>

                        @if (!string.IsNullOrEmpty(profile.Bio))
                        {
                        <div class="mt-4">
                            <h3 class="font-medium mb-2">About Me</h3>
                            <p class="text-gray-700">@profile.Bio</p>
                        </div>
                        }
                    </div>

                    <!-- Stats and Matches -->
                    <div class="space-y-6">
                        @if (stats != null)
                        {
                        <div>
                            <div class="flex justify-between items-center mb-4">
                                <h2 class="text-lg font-semibold">Match Statistics</h2>
                                <a href="@Url.Action("MatchHistory", "Profile", new { id = profile.Id })" class="text-blue-600 hover:text-blue-800 text-sm">
                                    <i class="fas fa-history mr-1"></i> Full History
                                </a>
                            </div>

                            <!-- 2x2 grid for stats - Force this with a class -->
                            <div class="stats-container">
                                <div class="stats-grid grid grid-cols-2 sm:grid-cols-2 gap-3">
                                    <div class="bg-blue-50 rounded-lg p-3 text-center">
                                        <p class="text-xl sm:text-2xl font-bold text-blue-700">@stats.TotalMatches</p>
                                        <p class="text-xs sm:text-sm text-gray-600">Total Matches</p>
                                    </div>
                                    <div class="bg-green-50 rounded-lg p-3 text-center">
                                        <p class="text-xl sm:text-2xl font-bold text-green-700">@stats.Wins</p>
                                        <p class="text-xs sm:text-sm text-gray-600">Wins</p>
                                    </div>
                                    <div class="bg-red-50 rounded-lg p-3 text-center">
                                        <p class="text-xl sm:text-2xl font-bold text-red-700">@stats.Losses</p>
                                        <p class="text-xs sm:text-sm text-gray-600">Losses</p>
                                    </div>
                                    <div class="bg-purple-50 rounded-lg p-3 text-center">
                                        <p class="text-xl sm:text-2xl font-bold text-purple-700">@stats.WinRate%</p>
                                        <p class="text-xs sm:text-sm text-gray-600">Win Rate</p>
                                    </div>
                                </div>
                            </div>

                            <!-- Expandable Tournament/Ladder Stats -->
                            <div class="space-y-3">
                                <!-- Tournament Stats (Expandable) -->
                                <div class="border border-gray-200 rounded-lg overflow-hidden">
                                    <div id="tournament-header" class="expandable-header cursor-pointer bg-gray-50 px-4 py-3 flex justify-between items-center" onclick="toggleSection('tournament-stats')">
                                        <h3 class="font-medium">Tournament Stats</h3>
                                        <i id="tournament-icon" class="fas fa-chevron-down text-gray-600 transition-transform"></i>
                                    </div>
                                    <div id="tournament-stats" class="expandable-content hidden p-4 border-t border-gray-200">
                                        <!-- 2x2 grid for tournament stats -->
                                        <div class="inner-stats-grid grid grid-cols-2 gap-3">
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Tournaments</p>
                                                <p class="font-semibold">@stats.TournamentsParticipated</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Matches</p>
                                                <p class="font-semibold">@stats.TournamentMatches</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Wins</p>
                                                <p class="font-semibold">@stats.TournamentWins</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Win Rate</p>
                                                <p class="font-semibold">@stats.TournamentWinRate%</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Ladder Stats (Expandable) -->
                                <div class="border border-gray-200 rounded-lg overflow-hidden">
                                    <div id="ladder-header" class="expandable-header cursor-pointer bg-gray-50 px-4 py-3 flex justify-between items-center" onclick="toggleSection('ladder-stats')">
                                        <h3 class="font-medium">Ladder Stats</h3>
                                        <i id="ladder-icon" class="fas fa-chevron-down text-gray-600 transition-transform"></i>
                                    </div>
                                    <div id="ladder-stats" class="expandable-content hidden p-4 border-t border-gray-200">
                                        <!-- 2x2 grid for ladder stats -->
                                        <div class="inner-stats-grid grid grid-cols-2 gap-3">
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Ladders</p>
                                                <p class="font-semibold">@stats.LaddersParticipated</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Matches</p>
                                                <p class="font-semibold">@stats.LadderMatches</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Wins</p>
                                                <p class="font-semibold">@stats.LadderWins</p>
                                            </div>
                                            <div class="inner-stats-item">
                                                <p class="text-gray-600 text-sm">Rank Improvements</p>
                                                <p class="font-semibold">@stats.LadderRankImprovements</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        if (stats.RecentPerformance != null && stats.RecentPerformance.Count > 0)
                        {
                        <div>
                            <h2 class="text-lg font-semibold mb-3">Recent Matches</h2>
                            <div class="space-y-3">
                                @foreach (var match in stats.RecentPerformance)
                                {
                                <div class="border border-gray-200 rounded-md p-3 flex justify-between items-center">
                                    <div>
                                        <p class="font-medium text-sm sm:text-base">@(match.Type.ToUpper()) Match</p>
                                        <p class="text-xs sm:text-sm text-gray-600">@match.Date.ToString("MMM d, yyyy")</p>
                                    </div>
                                    <span class="px-2 py-1 rounded-full text-xs font-medium @(match.IsWin ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                        @(match.IsWin ? "WIN" : "LOSS")
                                    </span>
                                </div>
                                }
                            </div>
                        </div>
                        }
                        }
                        else
                        {
                        <div class="bg-gray-50 p-4 rounded-md text-center text-gray-600">
                            <p>No match statistics available</p>
                        </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Toggle sections for Tournament and Ladder stats
        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            const icon = document.getElementById(sectionId.replace('stats', 'icon'));

            if (section.classList.contains('hidden')) {
                section.classList.remove('hidden');
                icon.classList.add('rotate-180');
            } else {
                section.classList.add('hidden');
                icon.classList.remove('rotate-180');
            }
        }

        // This ensures notifications are properly displayed when user actions are performed
        document.addEventListener("DOMContentLoaded", function () {
            // Success message handling
            const successMessage = "@TempData["SuccessMessage"]";
            if (successMessage && successMessage !== "") {
                showToast("Success", successMessage);
            }

            // Error message handling
            const errorMessage = "@TempData["ErrorMessage"]";
            if (errorMessage && errorMessage !== "") {
                showToast("Error", errorMessage);
            }
        });

        // Helper function for showing toast notifications
        function showToast(title, message) {
            // Create container if it doesn't exist
            let toastContainer = document.getElementById('toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.id = 'toast-container';
                toastContainer.className = 'fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-xs';
                document.body.appendChild(toastContainer);
            }

            // Create toast
            const toast = document.createElement('div');
            toast.className = 'bg-white rounded-lg shadow-lg border border-gray-200 p-3 transform translate-x-full transition-transform duration-300';
            toast.innerHTML = `
                <div class="flex items-start">
                    <div class="flex-shrink-0 text-${title.toLowerCase() === 'error' ? 'red' : 'green'}-500 mr-2">
                        <i class="fas fa-${title.toLowerCase() === 'error' ? 'exclamation-circle' : 'check-circle'}"></i>
                    </div>
                    <div class="flex-1">
                        <div class="font-medium">${title}</div>
                        <div class="text-sm text-gray-600">${message}</div>
                    </div>
                    <button class="ml-2 text-gray-400 hover:text-gray-600" onclick="this.parentElement.parentElement.remove()">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
            `;

            // Add to container
            toastContainer.appendChild(toast);

            // Animate in
            setTimeout(() => {
                toast.classList.remove('translate-x-full');
            }, 10);

            // Auto-remove after 5 seconds
            setTimeout(() => {
                toast.classList.add('translate-x-full');
                setTimeout(() => {
                    if (toast.parentElement) {
                        toast.remove();
                    }
                }, 300);
            }, 5000);
        }
    </script>
}