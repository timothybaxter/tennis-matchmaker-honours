@{
    ViewData["Title"] = "Match History";
    var matches = ViewBag.Matches as List<TennisMatchmakingSite2.Models.CompMatchData>;
    var profile = ViewBag.Profile;
    var pagination = ViewBag.Pagination;
}

<div class="container mx-auto px-4 pb-20 pt-4 sm:pt-6">
    <div class="mt-2 sm:mt-4">
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-6">
            <div>
                <h1 class="text-xl sm:text-2xl font-bold">Match History</h1>
                <p class="text-gray-600 text-sm">@(profile?.Name ?? "Player")'s match record</p>
            </div>
            <div class="mt-3 sm:mt-0">
                <a href="@Url.Action("ViewProfile", "Profile", new { id = ViewBag.UserId })" class="flex items-center text-blue-600 hover:text-blue-800 text-sm">
                    <i class="fas fa-arrow-left mr-1"></i> Back to Profile
                </a>
            </div>
        </div>

        @if (TempData["ErrorMessage"] != null)
        {
        <div class="bg-red-50 text-red-800 p-4 rounded-md mb-4 sm:mb-6">
            @TempData["ErrorMessage"]
        </div>
        }

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 sm:p-6">
            <!-- Always show filter controls regardless of results -->
            <div class="mb-5">
                <div class="flex flex-col space-y-3 sm:space-y-0 sm:flex-row justify-between sm:items-center">
                    <div class="mb-2 sm:mb-0">
                        <h2 class="text-lg font-semibold">Match History</h2>
                        <p class="text-xs sm:text-sm text-gray-600">Showing @(matches?.Count ?? 0) matches of @(pagination?.Total ?? matches?.Count ?? 0) total</p>
                    </div>

                    <!-- Horizontal scrolling filter buttons on mobile -->
                    <div class="flex overflow-x-auto pb-2 -mx-4 px-4 sm:mx-0 sm:px-0 sm:overflow-visible sm:pb-0 sm:flex-wrap sm:gap-2">
                        <div class="flex space-x-2">
                            <a href="?id=@ViewBag.UserId&type=tournament"
                               class="flex-shrink-0 px-3 py-1.5 rounded-md @(ViewBag.CurrentType == "tournament" ? "bg-blue-100 text-blue-800 font-bold" : "bg-blue-50 text-blue-700") text-sm font-medium hover:bg-blue-100 transition-colors">
                                Tournaments
                            </a>
                            <a href="?id=@ViewBag.UserId&type=ladder"
                               class="flex-shrink-0 px-3 py-1.5 rounded-md @(ViewBag.CurrentType == "ladder" ? "bg-purple-100 text-purple-800 font-bold" : "bg-purple-50 text-purple-700") text-sm font-medium hover:bg-purple-100 transition-colors">
                                Ladders
                            </a>
                            <a href="?id=@ViewBag.UserId"
                               class="flex-shrink-0 px-3 py-1.5 rounded-md @(ViewBag.CurrentType == null ? "bg-gray-100 text-gray-800 font-bold" : "bg-gray-50 text-gray-700") text-sm font-medium hover:bg-gray-100 transition-colors">
                                All Matches
                            </a>
                        </div>
                    </div>
                </div>
            </div>

            @if (matches == null || !matches.Any())
        {
            <div class="bg-gray-50 p-6 sm:p-8 rounded-md text-center">
                @if (ViewBag.CurrentType == "tournament")
            {
                <p class="text-gray-600 mb-2">No tournament matches found</p>
                <p class="text-sm text-gray-500">This player hasn't completed any tournament matches yet.</p>
            }
            else if (ViewBag.CurrentType == "ladder")
            {
                <p class="text-gray-600 mb-2">No ladder matches found</p>
                <p class="text-sm text-gray-500">This player hasn't completed any ladder matches yet.</p>
            }
            else
            {
                <p class="text-gray-600 mb-2">No match history available</p>
                <p class="text-sm text-gray-500">This player hasn't completed any competitive matches yet.</p>
            }
            </div>
        }
        else
        {
 <!-- This filter section has been moved above to always display, even when there are no matches -->

 <!-- Redesigned match list for mobile -->
            <div class="space-y-4">
                @foreach (var match in matches)
                {
                    var opponent = match.Opponent;
                    var isWin = match.IsWinner;
                    var matchSource = match.TournamentId != null ? "tournament" : "ladder";
                    var sourceId = match.TournamentId ?? match.LadderId;
                    var tournamentInfo = match.Tournament;
                    var ladderInfo = match.Ladder;

                <div class="border border-gray-200 rounded-lg overflow-hidden hover:border-gray-300 transition-colors">
                    <!-- Match Header -->
                    <div class="bg-gray-50 p-3 flex justify-between items-center">
                        <div class="flex items-center space-x-2">
                            <span class="inline-flex items-center px-2 py-0.5 text-xs font-medium rounded-full
                                  @(isWin ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800")">
                                @(isWin ? "WIN" : "LOSS")
                            </span>
                            <span class="inline-flex items-center px-2 py-0.5 text-xs font-medium rounded-full
                                  @(matchSource == "tournament" ? "bg-blue-100 text-blue-800" : "bg-purple-100 text-purple-800")">
                                @(matchSource == "tournament" ? "TOURNAMENT" : "LADDER")
                            </span>
                            @if (opponent != null && !string.IsNullOrEmpty(opponent.PlayerLevel))
                            {
                            <span class="inline-flex items-center px-2 py-0.5 text-xs font-medium rounded-full bg-gray-100 text-gray-800">
                                @opponent.PlayerLevel
                            </span>
                            }
                        </div>
                        <button class="text-gray-500 hover:text-gray-700 focus:outline-none" aria-label="Toggle match details"
                                onclick="toggleMatchDetails('match-@(match.Id)')">
                            <i id="icon-match-@(match.Id)" class="fas fa-chevron-down transition-transform"></i>
                        </button>
                    </div>

                    <!-- Match Main Info -->
                    <div class="p-3">
                        <div class="flex justify-between items-start">
                            <div>
                                <p class="font-medium">vs. @(opponent?.Name ?? "Opponent")</p>
                                <p class="text-sm text-gray-600">@match.CompletedAt?.ToString("MMMM d, yyyy")</p>
                                @if (matchSource == "tournament" && tournamentInfo != null)
                                {
                                <p class="text-xs text-gray-500">@tournamentInfo.Name</p>
                                }
                                @if (matchSource == "ladder" && ladderInfo != null)
                                {
                                <p class="text-xs text-gray-500">@ladderInfo.Name</p>
                                }
                            </div>

                            @if (match.Scores != null && match.Scores.Any())
                            {
                            <div class="bg-gray-50 px-3 py-1 rounded-md text-right min-w-[80px]">
                                @foreach (var score in match.Scores)
                                {
                                <span class="block text-sm">@score.Player1-@score.Player2</span>
                                }
                            </div>
                            }
                        </div>
                    </div>

                    <!-- Expandable Content - Hidden by default -->
                    <div id="match-@(match.Id)" class="hidden">
                        <div class="border-t border-gray-100 p-3 bg-gray-50 flex flex-col sm:flex-row gap-2 justify-between">
                            @if (matchSource == "tournament")
                            {
                            <a href="@Url.Action("TournamentDetails", "Tournaments", new { id = sourceId })"
                               class="text-blue-600 hover:text-blue-800 flex items-center justify-center py-1.5 px-3 rounded-md border border-blue-200 bg-blue-50 text-sm">
                                <i class="fas fa-trophy mr-1"></i>
                                <span>View Tournament</span>
                            </a>
                            }
                            else
                            {
                            <a href="@Url.Action("LadderDetails", "Tournaments", new { id = sourceId })"
                               class="text-purple-600 hover:text-purple-800 flex items-center justify-center py-1.5 px-3 rounded-md border border-purple-200 bg-purple-50 text-sm">
                                <i class="fas fa-list-ol mr-1"></i>
                                <span>View Ladder</span>
                            </a>
                            }

                            @if (opponent != null)
                            {
                            <a href="@Url.Action("ViewProfile", "Profile", new { id = opponent.Id })"
                               class="text-gray-600 hover:text-gray-800 flex items-center justify-center py-1.5 px-3 rounded-md border border-gray-200 bg-gray-50 text-sm">
                                <i class="fas fa-user mr-1"></i>
                                <span>View Opponent</span>
                            </a>
                            }
                        </div>
                    </div>
                </div>
                }
            </div>

 <!-- Improved Pagination for Mobile -->
            @if (pagination != null && pagination.Total > pagination.Limit)
            {
            <div class="mt-6 flex justify-center">
                <nav class="inline-flex rounded-md shadow-sm" aria-label="Pagination">
                    @{
                        var currentPage = (pagination.Skip / pagination.Limit) + 1;
                        var totalPages = (int)Math.Ceiling(pagination.Total / (double)pagination.Limit);
                        var typeParam = ViewBag.CurrentType != null ? $"&type={ViewBag.CurrentType}" : "";

                        // Simplified mobile pagination - just show prev/next and current page info
                    }

                    <a href="?id=@ViewBag.UserId&skip=@(Math.Max(0, pagination.Skip - pagination.Limit))@typeParam"
                       class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 @(currentPage == 1 ? "opacity-50 cursor-not-allowed" : "")">
                        <span class="sr-only">Previous</span>
                        <i class="fas fa-chevron-left"></i>
                    </a>

                    <span class="relative inline-flex items-center px-4 py-2 border-t border-b border-gray-300 bg-white text-sm text-gray-700">
                        Page @currentPage of @totalPages
                    </span>

                    <a href="?id=@ViewBag.UserId&skip=@(Math.Min(pagination.Skip + pagination.Limit, Math.Max(0, pagination.Total - pagination.Limit)))@typeParam"
                       class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 @(currentPage == totalPages ? "opacity-50 cursor-not-allowed" : "")">
                        <span class="sr-only">Next</span>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </nav>
            </div>
            }
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Function to toggle match details
        function toggleMatchDetails(id) {
            const details = document.getElementById(id);
            const icon = document.getElementById('icon-' + id);

            if (!details || !icon) return;

            if (details.classList.contains('hidden')) {
                details.classList.remove('hidden');
                icon.classList.add('rotate-180');
            } else {
                details.classList.add('hidden');
                icon.classList.remove('rotate-180');
            }
        }
    </script>
}