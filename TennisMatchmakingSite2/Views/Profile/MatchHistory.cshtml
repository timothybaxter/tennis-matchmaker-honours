@{
    ViewData["Title"] = "Match History";
    var matches = ViewBag.Matches as List<TennisMatchmakingSite2.Models.CompMatchData>;
    var profile = ViewBag.Profile;
    var pagination = ViewBag.Pagination;
}

<div class="container mx-auto px-4 pb-20">
    <div class="mt-4">
        <div class="flex flex-col md:flex-row justify-between items-start md:items-center mb-6">
            <div>
                <h1 class="text-2xl font-bold">Match History</h1>
                <p class="text-gray-600">@(profile?.Name ?? "Player")'s match record</p>
            </div>
            <div class="mt-2 md:mt-0">
                <a href="@Url.Action("ViewProfile", "Profile", new { id = ViewBag.UserId })" class="flex items-center text-blue-600 hover:text-blue-800">
                    <i class="fas fa-arrow-left mr-1"></i> Back to Profile
                </a>
            </div>
        </div>

        @if (TempData["ErrorMessage"] != null)
        {
        <div class="bg-red-50 text-red-800 p-4 rounded-md mb-6">
            @TempData["ErrorMessage"]
        </div>
        }

        <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
            @if (matches == null || !matches.Any())
            {
            <div class="bg-gray-50 p-8 rounded-md text-center">
                <p class="text-gray-600 mb-2">No match history available</p>
                <p class="text-sm text-gray-500">This player hasn't completed any competitive matches yet.</p>
            </div>
            }
            else
            {
 <!-- Filter Controls -->
            <div class="mb-6">
                <div class="flex flex-col md:flex-row justify-between items-center gap-4">
                    <div>
                        <h2 class="text-lg font-semibold">Match History</h2>
                        <p class="text-sm text-gray-600">Showing @matches.Count matches of @(pagination?.Total ?? matches.Count) total</p>
                    </div>
                    <div class="flex flex-wrap gap-2">
                        <a href="?type=tournament" class="px-3 py-1 rounded-md bg-blue-50 text-blue-700 text-sm font-medium hover:bg-blue-100 transition-colors">
                            Tournaments
                        </a>
                        <a href="?type=ladder" class="px-3 py-1 rounded-md bg-purple-50 text-purple-700 text-sm font-medium hover:bg-purple-100 transition-colors">
                            Ladders
                        </a>
                        <a href="?" class="px-3 py-1 rounded-md bg-gray-50 text-gray-700 text-sm font-medium hover:bg-gray-100 transition-colors">
                            All Matches
                        </a>
                    </div>
                </div>
            </div>

 <!-- Match List -->
            <div class="space-y-4">
                @foreach (var match in matches)
                    {
                        var opponent = match.Opponent;
                        var isWin = match.IsWinner;
                        var matchSource = match.TournamentId != null ? "tournament" : "ladder";
                        var sourceId = match.TournamentId ?? match.LadderId;

                <div class="border border-gray-200 rounded-lg overflow-hidden hover:border-gray-300 transition-colors">
                    <div class="flex flex-col md:flex-row justify-between p-4">
                        <!-- Match Info -->
                        <div class="flex-1">
                            <div class="flex items-center mb-2">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                              @(isWin ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") mr-2">
                                    @(isWin ? "WIN" : "LOSS")
                                </span>
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium
                                              @(matchSource == "tournament" ? "bg-blue-100 text-blue-800" : "bg-purple-100 text-purple-800")">
                                    @(matchSource.ToUpper())
                                </span>
                            </div>

                            <div class="flex flex-col md:flex-row md:items-center gap-2 md:gap-6">
                                <div>
                                    <p class="font-medium text-gray-900">vs. @(opponent?.Name ?? "Opponent")</p>
                                    <p class="text-sm text-gray-600">@match.CompletedAt?.ToString("MMMM d, yyyy")</p>
                                </div>

                                @if (match.Scores != null && match.Scores.Any())
                                        {
                                <div class="bg-gray-50 px-3 py-1 rounded-md">
                                    @foreach (var score in match.Scores)
                                                {
                                    <span class="mx-1">@score.Player1-@score.Player2</span>
                                                }
                                </div>
                                        }
                            </div>
                        </div>

                        <!-- Match Context -->
                        <div class="mt-3 md:mt-0 md:ml-4 md:flex-shrink-0 flex flex-col justify-center">
                            @if (matchSource == "tournament")
                                    {
                            <a href="@Url.Action("TournamentDetails", "Tournaments", new { id = sourceId })"
                               class="text-blue-600 hover:text-blue-800 flex items-center">
                                <i class="fas fa-trophy mr-1"></i>
                                <span class="text-sm">View Tournament</span>
                            </a>
                                    }
                                    else
                                    {
                            <a href="@Url.Action("LadderDetails", "Tournaments", new { id = sourceId })"
                               class="text-purple-600 hover:text-purple-800 flex items-center">
                                <i class="fas fa-list-ol mr-1"></i>
                                <span class="text-sm">View Ladder</span>
                            </a>
                                    }

                            @if (opponent != null)
                                    {
                            <a href="@Url.Action("View", "Profile", new { id = opponent.Id })"
                               class="text-gray-600 hover:text-gray-800 flex items-center mt-2">
                                <i class="fas fa-user mr-1"></i>
                                <span class="text-sm">View Opponent</span>
                            </a>
                                    }
                        </div>
                    </div>
                </div>
                    }
            </div>

 <!-- Pagination -->
            @if (pagination != null && pagination.Total > pagination.Limit)
                {
            <div class="mt-6 flex justify-center">
                <nav class="inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                    @{
                                var currentPage = (pagination.Skip / pagination.Limit) + 1;
                                var totalPages = (int)Math.Ceiling(pagination.Total / (double)pagination.Limit);
                    }

                    <a href="?skip=@(Math.Max(0, pagination.Skip - pagination.Limit))"
                       class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span class="sr-only">Previous</span>
                        <i class="fas fa-chevron-left"></i>
                    </a>

                    @for (int i = 1; i <= totalPages; i++)
                            {
                    <a href="?skip=@((i-1) * pagination.Limit)"
                       class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium @(i == currentPage ? "text-blue-600 bg-blue-50" : "text-gray-700 hover:bg-gray-50")">
                        @i
                    </a>
                            }

                    <a href="?skip=@(Math.Min(pagination.Skip + pagination.Limit, pagination.Total - pagination.Limit))"
                       class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                        <span class="sr-only">Next</span>
                        <i class="fas fa-chevron-right"></i>
                    </a>
                </nav>
            </div>
                }
            }
        </div>
    </div>
</div>