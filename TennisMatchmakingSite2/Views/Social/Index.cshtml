@model List<TennisMatchmakingSite2.Models.NotificationModel>
    @{
    ViewData["Title"] = "Social";
    var currentUserId = Context.Session.GetString("UserId");
    var currentTheme = Context.Session.GetString("Theme") ?? "Wimbledon";
    }

    <div id="theme-data" data-theme="@currentTheme" class="hidden"></div>

    <div class="container mx-auto px-2 sm:px-4 pb-16">
        <div class="mt-3">
            <h1 class="text-xl sm:text-2xl font-bold mb-3">Social Hub</h1>

            <!-- Navigation Buttons - Mobile Optimized -->
            <div class="grid grid-cols-2 gap-2 mb-4">
                <a href="@Url.Action("Friends", "Social")"
                   class="flex items-center justify-center px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors theme-button">
                    <i class="fas fa-user-friends mr-2"></i>
                    Friends
                </a>
                <a href="@Url.Action("Messages", "Social")"
                   class="flex items-center justify-center px-3 py-2 bg-green-100 text-green-700 rounded-lg hover:bg-green-200 transition-colors theme-button">
                    <i class="fas fa-comment-alt mr-2"></i>
                    Messages
                </a>
                <a href="@Url.Action("FriendRequests", "Social")"
                   class="col-span-2 flex items-center justify-center px-3 py-2 bg-purple-100 text-purple-700 rounded-lg hover:bg-purple-200 transition-colors theme-button">
                    <i class="fas fa-user-plus mr-2"></i>
                    Friend Requests
                </a>
            </div>

            <!-- Toast container for notifications -->
            <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-xs"></div>

            <!-- Latest Notifications -->
            <div class="mb-4">
                <h2 class="text-lg sm:text-xl font-semibold mb-2">Recent Notifications</h2>

                @if (!Model.Any())
            {
                <div class="bg-blue-50 text-blue-700 p-3 rounded-md">
                    No notifications yet.
                </div>
            }
            else
            {
                <div id="notifications-container" class="space-y-2">
                    @foreach (var notification in Model)
                    {
                    <div class="bg-white rounded-lg shadow-sm border @(notification.IsRead ? "border-gray-200" : "border-blue-300") p-3 hover:shadow-md transition-shadow" id="notification-@notification.Id" style="transition: all 0.3s ease;">
                        <div class="flex justify-between items-start">
                            <div class="flex-1">
                                @switch (notification.Type)
                                {
                                case "match_edited":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Match Updated</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Index", "Match", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Match
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                    break;

                                case "match_deleted":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Match Cancelled</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Index", "Match")"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        Find Other Matches
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                    break;

                                case "match_joined":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">New Match Participant</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Index", "Match", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Match
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                break;

                                case "match_request":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Match Join Request</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("ManageRequests", "Match", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200">
                                        Review Request
                                    </a>
                                    <a href="@Url.Action("Index", "Match", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Match
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                break;

                                    case "friend_request":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Friend Request</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <form asp-action="RespondToFriendRequest" asp-route-requestId="@notification.RelatedItemId" asp-route-accept="true" method="post">
                                        <button type="submit" class="px-2 py-1 text-sm bg-green-100 text-green-700 rounded-md hover:bg-green-200">Accept</button>
                                    </form>
                                    <form asp-action="RespondToFriendRequest" asp-route-requestId="@notification.RelatedItemId" asp-route-accept="false" method="post">
                                        <button type="submit" class="px-2 py-1 text-sm bg-red-100 text-red-700 rounded-md hover:bg-red-200">Decline</button>
                                    </form>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;

                                    case "friend_accepted":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Friend Request Accepted</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Friends", "Social")"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Friends
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;

                                    case "friend_declined":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Friend Request Declined</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;

                                    case "message":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">New Message</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Conversation", "Social", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Conversation
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;

                                    case "match_invite":
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Match Invitation</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <a href="@Url.Action("Detail", "Match", new { id = notification.RelatedItemId })"
                                       class="inline-block px-2 py-1 text-sm bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200">
                                        View Match
                                    </a>
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;

                                    default:
                                <div class="flex justify-between mb-1">
                                    <h3 class="text-base font-semibold">Notification</h3>
                                    <span class="text-xs text-gray-500">
                                        @notification.CreatedAt.ToString("MMM d, h:mm tt")
                                    </span>
                                </div>
                                <p class="text-sm text-gray-600 mb-2">@notification.Content</p>
                                <div class="flex flex-wrap gap-1">
                                    <button type="button" class="px-2 py-1 text-sm bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 dismiss-button"
                                            onclick="dismissNotification('@notification.Id')">
                                        Dismiss
                                    </button>
                                </div>
                                        break;
                                }
                            </div>
                            @if (!notification.IsRead)
                            {
                            <span class="ml-2 inline-flex items-center px-1.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                                New
                            </span>
                            }
                        </div>
                    </div>
                    }
                </div>
            }
            </div>

            <!-- Connection Status - More Mobile Friendly -->
            <div id="connection-status-indicator" class="fixed bottom-20 right-2 z-10 opacity-100 transition-opacity duration-500">
                <div class="flex items-center bg-white rounded-full shadow-md px-2 py-1 text-xs">
                    <span class="mr-1">SignalR:</span>
                    <span id="connection-status" class="text-red-500">Disconnected</span>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden notification sound element -->
    <audio id="notification-sound" preload="auto" src="/sounds/notification.mp3"></audio>

    @section Scripts {
        <script type="text/javascript">
            // Notice we've added type="text/javascript" to ensure proper parsing

            // Very simplified dismiss function - directly using inline onclick handlers
            function dismissNotification(notificationId) {
                console.log('Dismissing notification: ' + notificationId);

                // Get the card element
                var card = document.getElementById('notification-' + notificationId);
                if (!card) {
                    console.error('Card not found');
                    return;
                }

                // Visual feedback
                card.style.opacity = '0.5';

                // Create form data
                var formData = new FormData();
                formData.append('notificationId', notificationId);

                // Make the fetch request
                fetch('/Social/DeleteNotification', {
                    method: 'POST',
                    body: formData
                })
                    .then(function (response) {
                        console.log('Status: ' + response.status);

                        // Animate out
                        card.style.opacity = '0';
                        card.style.transform = 'translateX(100%)';

                        // Remove after animation
                        setTimeout(function () {
                            card.remove();

                            // Check if container is empty
                            var container = document.getElementById('notifications-container');
                            if (container && container.children.length === 0) {
                                container.innerHTML = '<div class="bg-blue-50 text-blue-700 p-3 rounded-md">No notifications yet.</div>';
                            }
                        }, 300);
                    })
                    .catch(function (error) {
                        console.error('Error: ', error);
                        // Restore on error
                        card.style.opacity = '1';
                        card.style.transform = 'none';
                    });
            }

            // Apply theme colors
            document.addEventListener('DOMContentLoaded', function () {
                console.log('DOM loaded - applying themes');

                // Hide connection status after delay
                setTimeout(function () {
                    var indicator = document.getElementById('connection-status-indicator');
                    if (indicator) {
                        indicator.style.opacity = '0';
                        setTimeout(function () {
                            indicator.style.display = 'none';
                        }, 500);
                    }
                }, 5000);
            });
        </script>
    }
