@{
    // Get current theme
    var currentTheme = Context.Session.GetString("Theme") ?? "Wimbledon";
    var userId = Context.Session.GetString("UserId");
    var userName = Context.Session.GetString("UserName");

    // Define theme colors based on the current theme
    string navbarColor, backgroundImage, bottomNavColor, bottomNavLinkColor, bottomNavLinkHoverColor, bottomNavLinkActiveColor, iconColor;

    switch(currentTheme)
    {
        case "RolandGarros":
            navbarColor = "#084e2e";
            backgroundImage = "url('/images/court_background_clay.png')";
            bottomNavColor = "#084e2e";
            bottomNavLinkColor = "rgba(255, 255, 255, 0.7)";
            bottomNavLinkHoverColor = "rgba(255, 255, 255, 0.9)";
            bottomNavLinkActiveColor = "white";
            iconColor = "white";
            break;
        case "USOpen":
            navbarColor = "#426892";
            backgroundImage = "url('/images/court_background_hard.png')";
            bottomNavColor = "#426892";
            bottomNavLinkColor = "rgba(0, 0, 0, 0.7)";
            bottomNavLinkHoverColor = "rgba(0, 0, 0, 0.9)";
            bottomNavLinkActiveColor = "white";
            iconColor = "white";
            break;
        case "AustralianOpen":
            navbarColor = "#e9f7ff";
            backgroundImage = "url('/images/court_background_blue.png')";
            bottomNavColor = "#e9f7ff";
            bottomNavLinkColor = "rgba(0, 0, 0, 0.7)";
            bottomNavLinkHoverColor = "rgba(0, 0, 0, 0.9)";
            bottomNavLinkActiveColor = "black";
            iconColor = "black";
            break;
        default: // Wimbledon
            navbarColor = "#64408a";
            backgroundImage = "url('/images/court_background_green.png')";
            bottomNavColor = "#64408a";
            bottomNavLinkColor = "rgba(255, 255, 255, 0.7)";
            bottomNavLinkHoverColor = "rgba(255, 255, 255, 0.9)";
            bottomNavLinkActiveColor = "white";
            iconColor = "white";
            break;
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Court Connect</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://unpkg.com/lucide@latest"></script>
    <script src="~/js/theme-handler.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jquery-bracket/0.11.1/jquery.bracket.min.css" />
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery-bracket/0.11.1/jquery.bracket.min.js"></script>

    <!-- Add this at the top of your _Layout.cshtml file -->
    <style>
    /* Global fix for match card content */
    [id^="content-"] {
        max-height: none !important;
        height: auto !important;
        overflow: visible !important;
    }

    /* Make sure button containers wrap properly */
    .button-container {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    @@media (max-width: 640px) {
        /* Smaller buttons on mobile */
        button.inline-flex {
            padding: 0.5rem !important;
            font-size: 0.75rem !important;
        }

        button.inline-flex i {
            margin-right: 0.25rem !important;
        }
    }
    </style>

    <style>
        html, body {
            height: 100%;
            margin: 0;
            overflow: auto;
        }

        .bg-tennis {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-position: center;
            background-repeat: no-repeat;
            background-size: cover;
            z-index: -1;
            pointer-events: none;
            opacity: 0.6;
            background-image: @backgroundImage;
        }

        .header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            height: 100px;
            background-color: @navbarColor;
            z-index: 50;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        .logo-container {
            width: 400px;
            height: 100px;
            pointer-events: none; /* Completely ignore pointer events */
        }

            .logo-container img {
                width: 100%;
                height: 100%;
                object-fit: contain;
                pointer-events: auto; /* Only the actual visible part of image is clickable */
            }

        .bottom-nav {
            background-color: @bottomNavColor;
            border-top: 1px solid rgba(255, 255, 255, 0.1);
        }

        .bottom-nav a {
            color: @bottomNavLinkColor;
        }

        .bottom-nav a:hover {
            color: @bottomNavLinkHoverColor;
        }

        .bottom-nav a.active {
            color: @bottomNavLinkActiveColor;
        }

       @@media (orientation: portrait) {
            .bg-tennis {
                background-size: auto 100vh;
                background-position: center;
            }
        }

        @@media (orientation: landscape) {
            .bg-tennis {
                background-size: 100vw auto;
                background-position: center;
            }
        }

        /* Toast container */
        #toast-container {
            z-index: 9999;
        }

        /* Toast animation */
        #toast-container > div {
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

        /* Notification styles */
        .notification-item.new-notification {
            opacity: 0;
            transform: translateY(-20px);
            transition: opacity 0.3s ease, transform 0.3s ease;
        }

        .notification-item.new-notification.shown {
            opacity: 1;
            transform: translateY(0);
        }

        /* Message list styles */
        .message-item {
            margin-bottom: 10px;
            animation: fadeIn 0.3s ease;
        }

        .message-item.sent {
            text-align: right;
        }

        .message-item.received {
            text-align: left;
        }

        .message-content {
            display: inline-block;
            max-width: 80%;
            padding: 8px 12px;
            border-radius: 12px;
        }

        .message-item.sent .message-content {
            background-color: #dcf8c6;
        }

        .message-item.received .message-content {
            background-color: #f1f0f0;
        }

        .message-time {
            display: block;
            font-size: 0.75rem;
            color: #888;
            margin-top: 2px;
        }

        /* Notification badge */
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: #FF3B30;
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
    </style>
</head>
<body>
    @inject IConfiguration Configuration
    <script>
        window.API_BASE_URL = '@Configuration["ApiBaseUrl"]';
        // Store current user information for SignalR
        const currentUserId = '@userId';
        const currentUserName = '@userName';
    </script>

    @inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
    @{
        var token = Xsrf.GetAndStoreTokens(Context).RequestToken;
        <input type="hidden" name="__RequestVerificationToken" value="@token" />
    }

    <div class="bg-tennis"></div>
    <div class="header">
        <div class="logo-container">
            <img src="@Url.Content("~/images/logo.png")" alt="Logo" asp-append-version="true" />
        </div>
    </div>

    <!-- Toast container for notifications -->
    <div id="toast-container" class="fixed top-4 right-4 z-50 flex flex-col space-y-2 max-w-xs"></div>

    <div class="container">
        <main role="main" class="pb-20 mt-28">
            @RenderBody()
        </main>
    </div>

    @if (!(Context.Request.Path.Value?.ToLower().StartsWith("/account") ?? false))
    {
    <nav class="fixed bottom-0 left-0 right-0 bottom-nav z-50" style="padding-bottom: env(safe-area-inset-bottom);">
        <div class="flex justify-around items-center h-16">
            <a asp-controller="Match" asp-action="Index" class="flex flex-col items-center justify-center w-full h-full @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Match" ? "active" : "")">
                <i data-lucide="home" class="w-6 h-6" color="@iconColor"></i>
                <span class="text-xs mt-1">Home</span>
            </a>
            <a asp-controller="Social" asp-action="Index" class="social-icon-container flex flex-col items-center justify-center w-full h-full relative @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Social" ? "active" : "")">
                <i data-lucide="users" class="w-6 h-6" color="@iconColor"></i>
                <span class="text-xs mt-1">Social</span>
                <!-- Notification badge -->
                <span id="notification-badge" class="notification-badge hidden">0</span>
            </a>
            <a asp-controller="Map" asp-action="Index" class="flex flex-col items-center justify-center w-full h-full @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Map" ? "active" : "")">
                <i data-lucide="map" class="w-6 h-6" color="@iconColor"></i>
                <span class="text-xs mt-1">Map</span>
            </a>
            <a asp-controller="Tournaments" asp-action="Index" class="flex flex-col items-center justify-center w-full h-full @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Tournaments" ? "active" : "")">
                <i data-lucide="trophy" class="w-6 h-6" color="@iconColor"></i>
                <span class="text-xs mt-1">Competitions</span>
            </a>
            <a asp-controller="Settings" asp-action="Index" class="flex flex-col items-center justify-center w-full h-full @(ViewContext.RouteData.Values["Controller"]?.ToString() == "Settings" ? "active" : "")">
                <i data-lucide="settings" class="w-6 h-6" color="@iconColor"></i>
                <span class="text-xs mt-1">Settings</span>
            </a>
        </div>
    </nav>
    }

    <!-- Connection status indicator (can be hidden in production) -->
    <div id="connection-status-indicator" class="fixed bottom-20 right-4 text-sm bg-white shadow rounded-full px-3 py-1 border z-50">
        Status: <span id="connection-status" class="text-gray-500">Connecting...</span>
    </div>

    <!-- Hidden audio element for notification sounds -->
    <audio id="notification-sound" preload="auto" src="/sounds/notification.mp3"></audio>

    @await RenderSectionAsync("Scripts", required: false)

    <script>
        lucide.createIcons();
        // Initialize theme - still useful for dynamic elements like hover effects
        document.addEventListener('DOMContentLoaded', function() {
            const currentTheme = '@currentTheme';
            window.applyTheme(currentTheme);

            // Hide connection status after 5 seconds
            setTimeout(() => {
                document.getElementById('connection-status-indicator').classList.add('hidden');
            }, 5000);
        });
    </script>

    <script>
    // Store session values globally for SignalR and other scripts
    window.currentUserId = '@Context.Session.GetString("UserId")';
    console.log("Current user ID set from session:", window.currentUserId);
    </script>

    <script src="~/js/match-functions.js"></script>
    <script src="~/js/signalr-connection.js"></script>
</body>
</html>