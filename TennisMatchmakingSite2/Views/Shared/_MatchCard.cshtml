@model TennisMatchmakingSite2.Models.MatchData
@{
    var isPersonal = ViewBag.IsPersonal ?? false;
    var currentUserId = ViewBag.CurrentUserId;
    var isFull = Model.IsFull;
    var isMatchCreator = currentUserId == Model.CreatorId;
}

<style>
    /* Ensure content is fully visible */
    #content-@Model.Id {
        max-height: none !important;
        height: auto !important;
        overflow: visible !important;
    }

    /* Fix button container layout */
    #content-@Model.Id .button-area {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin-top: 0.5rem;
        width: 100%;
    }

    /* Larger icons */
    .profile-icon {
        font-size: 1.2rem;
    }
</style>

<div class="bg-white rounded-lg shadow-sm border border-gray-200 hover:shadow-md transition-shadow">
    <!-- Header Section -->
    <div class="p-4" onclick="toggleCard('@Model.Id')">
        <div class="flex justify-between items-start">
            <div>
                <h3 class="text-lg font-semibold">@Model.CourtLocation</h3>
                <div class="mt-2 space-y-1 text-gray-600">
                    <p><span class="font-medium">Type:</span> @Model.MatchType?.ToUpper()</p>
                    <p><span class="font-medium">Time:</span> @Model.MatchTime.ToString("dd MMMM yyyy HH:mm")</p>
                    <div class="flex justify-between items-center w-full">
                        <span class="text-sm text-gray-700 font-medium bg-gray-100 px-2 py-0.5 rounded-full">
                            Skill Level: @(string.IsNullOrEmpty(Model.SkillLevel) ? "Unknown" : Model.SkillLevel)
                        </span>
                    </div>
                </div>
            </div>
            <div class="flex flex-col items-end gap-2">
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @(Model.Status?.ToLower() == "open" ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800")">
                    @(isFull && Model.Status?.ToLower() == "open" ? "FULL" : Model.Status?.ToUpper())
                </span>

                @if (isPersonal && Model.RequestedBy != null && Model.RequestedBy.Count > 0)
                {
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                    @Model.RequestedBy.Count Request@(Model.RequestedBy.Count > 1 ? "s" : "")
                </span>
                }

                @if (Model.Participants != null && Model.Participants.Count > 0)
                {
                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                    @Model.Participants.Count Participant@(Model.Participants.Count > 1 ? "s" : "")
                </span>
                }
            </div>
        </div>
        <div class="flex justify-center mt-2">
            <i id="icon-@Model.Id" class="fas fa-chevron-down text-gray-500"></i>
        </div>
    </div>

    <!-- Expandable Content Section -->
    <div id="content-@Model.Id" class="hidden">
        <div class="border-t border-gray-100" id="content-inner-@Model.Id">
            <!-- Participants Section -->
            @if (Model.Participants != null && Model.Participants.Count > 0)
            {
            <div class="p-4 border-b border-gray-100">
                <h4 class="font-medium text-gray-800 mb-2">Participants (@Model.Participants.Count)</h4>
                <div class="space-y-2">
                    @foreach (var participantId in Model.Participants)
                    {
                        var isCurrentUser = participantId == currentUserId;
                        var isHost = participantId == Model.CreatorId;

                        // Find participant details if available
                        var participantInfo = Model.ParticipantDetails.FirstOrDefault(p => p.Id == participantId);
                        var displayName = isCurrentUser
                            ? (isHost ? "You (Host)" : "You")
                            : (participantInfo?.Name ?? (isHost ? Model.PosterName + " (Host)" : "Player"));

                    <div class="flex items-center justify-between bg-gray-50 p-2 rounded-md">
                        <div class="flex items-center">
                            <span class="font-medium @(isCurrentUser ? "text-blue-600" : "")">
                                @displayName
                            </span>
                            @if (!string.IsNullOrEmpty(participantInfo?.PlayerLevel))
                                {
                            <span class="ml-2 text-xs text-gray-500 bg-gray-200 px-1.5 py-0.5 rounded-full">
                                @participantInfo.PlayerLevel
                            </span>
                                }
                        </div>
                        @if (!isCurrentUser)
                            {
                        <div class="flex items-center space-x-3">
                            <button onclick="viewProfile('@participantId'); event.stopPropagation();"
                                    class="text-purple-600 hover:text-purple-800 profile-icon" title="View Profile">
                                <i class="fas fa-user-circle"></i>
                            </button>
                            <button onclick="messageUser('@participantId', '@(displayName.Replace(" (Host)", ""))'); event.stopPropagation();"
                                    class="text-blue-600 hover:text-blue-800 profile-icon" title="Message">
                                <i class="fas fa-comment"></i>
                            </button>
                        </div>
                            }
                    </div>
                    }
                </div>
            </div>
            }

            @if (isPersonal)
            {
                <!-- Show match requests if any -->
            @if (Model.RequestedBy != null && Model.RequestedBy.Count > 0)
                {
            <div class="p-4 border-b border-gray-100">
                <h4 class="font-medium text-gray-800 mb-2">Match Requests (@Model.RequestedBy.Count)</h4>
                <div id="requests-@Model.Id" class="space-y-3">
                    <div class="text-center text-sm text-gray-500">
                        <i class="fas fa-spinner fa-spin mr-1"></i> Loading requests...
                    </div>
                </div>
            </div>
                }

 <!-- Show management buttons only for the match creator -->
            @if (isMatchCreator)
                {
            <div class="p-4">
                <div class="button-area justify-end">
                    <form asp-controller="Match" asp-action="Delete" method="post" class="inline" onsubmit="return confirm('Are you sure you want to delete this match?')">
                        <input type="hidden" name="matchId" value="@Model.Id" />
                        <button type="submit" onclick="event.stopPropagation();"
                                class="inline-flex items-center px-3 py-2 text-sm font-medium text-red-700 bg-red-50 rounded-md hover:bg-red-100">
                            <i class="fas fa-trash-alt mr-2"></i>Delete
                        </button>
                    </form>
                    <button onclick="editMatch('@Model.Id'); event.stopPropagation();"
                            class="inline-flex items-center px-3 py-2 text-sm font-medium text-blue-700 bg-blue-50 rounded-md hover:bg-blue-100">
                        <i class="fas fa-edit mr-2"></i>Edit
                    </button>
                </div>
            </div>
                }
            }
            else
            {
            <div class="p-4">
                <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
                    <div class="flex items-center">
                        <p class="text-gray-700">
                            <span class="font-medium">Posted by:</span>
                            @{
                                var creatorInfo = Model.ParticipantDetails.FirstOrDefault(p => p.Id == Model.CreatorId);
                                var creatorName = creatorInfo?.Name ?? Model.PosterName ?? "Match Creator";
                            }
                            <span class="hover:text-blue-600 cursor-pointer" onclick="viewProfile('@Model.CreatorId'); event.stopPropagation();">
                                @creatorName
                            </span>
                        </p>
                    </div>
                    <div class="button-area justify-center sm:justify-end">
                        @* Show appropriate button based on match and user state *@
                        @if (Model.CreatorId != currentUserId)
                        {
                        @if (isFull || Model.Status?.ToLower() != "open")
                            {
                        <button class="inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-gray-700 bg-gray-50 rounded-md cursor-not-allowed">
                            <i class="fas fa-times-circle mr-2"></i>Full
                        </button>
                            }
                            else if (Model.RequestedBy != null && Model.RequestedBy.Contains(currentUserId))
                            {
                        <button class="inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-yellow-700 bg-yellow-50 rounded-md cursor-not-allowed">
                            <i class="fas fa-clock mr-2"></i>Pending
                        </button>
                            }
                            else if (Model.Participants != null && Model.Participants.Contains(currentUserId))
                            {
                        <button class="inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-blue-700 bg-blue-50 rounded-md cursor-not-allowed">
                            <i class="fas fa-check mr-2"></i>Joined
                        </button>
                            }
                            else
                            {
                        <button onclick="requestMatch('@Model.Id'); event.stopPropagation();"
                                class="inline-flex items-center justify-center px-3 py-2 text-sm font-medium text-green-700 bg-green-50 rounded-md hover:bg-green-100">
                            <i class="fas fa-calendar-plus mr-2"></i>Request
                        </button>
                            }
                        }
                    </div>
                </div>
            </div>
            }
        </div>
    </div>
</div>

@if (isPersonal && Model.RequestedBy != null && Model.RequestedBy.Count > 0)
{
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Load requests when the card is expanded
        const cardToggle = document.querySelector('[onclick="toggleCard(\'@Model.Id\')"]');
        if (cardToggle) {
            cardToggle.addEventListener('click', function() {
                const content = document.getElementById('content-@Model.Id');
                if (!content.classList.contains('hidden')) {
                    loadMatchRequests('@Model.Id');
                }
            });
        }
    });
</script>
}

<!-- Modified toggle function specific to this card -->
<script>
    // Custom toggle function ensures proper expansion
    document.addEventListener('DOMContentLoaded', function() {
        const originalClickHandler = document.querySelector('[onclick="toggleCard(\'@Model.Id\')"]');
        if (originalClickHandler) {
            originalClickHandler.onclick = function(e) {
                e.preventDefault();
                const content = document.getElementById('content-@Model.Id');
                const icon = document.getElementById('icon-@Model.Id');

                content.classList.toggle('hidden');

                if (content.classList.contains('hidden')) {
                    icon.classList.remove('fa-chevron-up');
                    icon.classList.add('fa-chevron-down');
                } else {
                    icon.classList.remove('fa-chevron-down');
                    icon.classList.add('fa-chevron-up');

                    // Force layout recalculation
                    document.body.offsetHeight;
                }

                if (!content.classList.contains('hidden') && typeof loadMatchRequests === 'function') {
                    loadMatchRequests('@Model.Id');
                }
            };
        }
    });
</script>