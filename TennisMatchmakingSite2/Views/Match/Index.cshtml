@model List<TennisMatchmakingSite2.Models.MatchData>
    @{
    var isPersonal = ViewBag.IsPersonal ?? false;
    }

    <div class="container mx-auto px-4 pb-20">
        @if (TempData["SuccessMessage"] != null)
    {
        <div class="bg-green-50 text-green-800 p-4 rounded-md mb-4">
            @TempData["SuccessMessage"]
        </div>
    }

        @if (TempData["ErrorMessage"] != null)
    {
        <div class="bg-red-50 text-red-800 p-4 rounded-md mb-4">
            @TempData["ErrorMessage"]
        </div>
    }

    <div class="mt-4">
        <!-- Mobile View -->
        <div class="sm:hidden mt-16 mb-6">
            <h1 class="text-2xl font-bold text-center mb-4">@(isPersonal ? "My Matches" : "Available Matches")</h1>
            <div class="flex flex-wrap justify-between gap-2 px-2 mb-2">
                <a href="@(isPersonal ? @Url.Action("Index", "Match") : @Url.Action("Index", "Match", new { personal = true }))"
                   class="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md border transition-colors flex-1 justify-center
        @(isPersonal ? "text-gray-700 bg-white border-gray-300 hover:bg-gray-50" : "text-blue-700 bg-blue-50 border-blue-200 hover:bg-blue-100")">
                    <i class="fas @(isPersonal ? "fa-globe" : "fa-user") mr-2"></i>
                    @(isPersonal ? "View All" : "My Matches")
                </a>
                <a href="@Url.Action("MyRequests", "Match")"
                   class="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md border transition-colors flex-1 justify-center
        @(ViewContext.RouteData.Values["action"].ToString() == "MyRequests" ? "text-blue-700 bg-blue-50 border-blue-200" : "text-gray-700 bg-white border-gray-300 hover:bg-gray-50")">
                    <i class="fas fa-hand-paper mr-2"></i>Requests
                </a>
            </div>
            <button onclick="showCreateMatchModal()"
                    class="w-full inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors justify-center">
                <i class="fas fa-plus mr-2"></i>
                Create Match
            </button>
        </div>

        <!-- Desktop View -->
        <div class="hidden sm:flex justify-between items-center mb-6">
            <h1 class="text-2xl font-bold">@(isPersonal ? "My Matches" : "Available Matches")</h1>
            <div class="flex gap-4">
                <a href="@(isPersonal ? @Url.Action("Index", "Match") : @Url.Action("Index", "Match", new { personal = true }))"
                   class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-md border transition-colors
                    @(isPersonal ? "text-gray-700 bg-white border-gray-300 hover:bg-gray-50" : "text-blue-700 bg-blue-50 border-blue-200 hover:bg-blue-100")">
                    <i class="fas @(isPersonal ? "fa-globe" : "fa-user") mr-2"></i>
                    @(isPersonal ? "View All Matches" : "My Matches")
                </a>
                <a href="@Url.Action("MyRequests", "Match")"
                   class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-md border transition-colors
                         @(ViewContext.RouteData.Values["action"].ToString() == "MyRequests" ? "text-blue-700 bg-blue-50 border-blue-200" : "text-gray-700 bg-white border-gray-300 hover:bg-gray-50")">
                    <i class="fas fa-hand-paper mr-2"></i>My Requests
                </a>
                <button onclick="showCreateMatchModal()"
                        class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors">
                    <i class="fas fa-plus mr-2"></i>
                    Create Match
                </button>
            </div>
        </div>

        <!-- Mobile Filter Button and Form -->
        <div class="md:hidden mb-8">
            <button onclick="toggleMobileFilter()" type="button"
                    class="w-full bg-white text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors flex items-center justify-center border border-gray-200">
                <i class="fas fa-filter mr-2"></i>
                Filter Matches
            </button>
            <div id="mobileFilterForm" class="hidden mt-2 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                <!-- Embedded Filter Form for Mobile -->
                @using (Html.BeginForm("Index", "Match", FormMethod.Get))
                {
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                        <div class="relative">
                            <input type="text" name="courtLocation" id="mobileFilterLocation" value="@ViewBag.CurrentCourtLocation"
                                   autocomplete="off"
                                   class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Match Type</label>
                        <select name="matchType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">All Types</option>
                            <option value="singles" selected="@(ViewBag.CurrentMatchType == "singles")">SINGLES</option>
                            <option value="doubles" selected="@(ViewBag.CurrentMatchType == "doubles")">DOUBLES</option>
                            <option value="mixed" selected="@(ViewBag.CurrentMatchType == "mixed")">MIXED</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Skill Level</label>
                        <select name="skillLevel" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            <option value="">All Levels</option>
                            <option value="beginner" selected="@(ViewBag.CurrentSkillLevel == "beginner")">Beginner</option>
                            <option value="casual" selected="@(ViewBag.CurrentSkillLevel == "casual")">Casual</option>
                            <option value="intermediate" selected="@(ViewBag.CurrentSkillLevel == "intermediate")">Intermediate</option>
                            <option value="competitive" selected="@(ViewBag.CurrentSkillLevel == "competitive")">Competitive</option>
                            <option value="advanced" selected="@(ViewBag.CurrentSkillLevel == "advanced")">Advanced</option>
                        </select>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                        <input type="date" name="matchDate" value="@(ViewBag.CurrentMatchDate?.ToString("yyyy-MM-dd"))"
                               class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    </div>

                    <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">
                        Apply Filters
                    </button>
                </div>
                }
            </div>
        </div>

        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <!-- Desktop Filter Section -->
            <div class="hidden md:block md:col-span-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                    <h2 class="font-semibold mb-4">Filter Matches</h2>
                    <!-- Embedded Filter Form for Desktop -->
                    @using (Html.BeginForm("Index", "Match", FormMethod.Get))
                    {
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Location</label>
                            <div class="relative">
                                <input type="text" name="courtLocation" id="desktopFilterLocation" value="@ViewBag.CurrentCourtLocation"
                                       autocomplete="off"
                                       class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Match Type</label>
                            <select name="matchType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">All Types</option>
                                <option value="singles" selected="@(ViewBag.CurrentMatchType == "singles")">SINGLES</option>
                                <option value="doubles" selected="@(ViewBag.CurrentMatchType == "doubles")">DOUBLES</option>
                                <option value="mixed" selected="@(ViewBag.CurrentMatchType == "mixed")">MIXED</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Skill Level</label>
                            <select name="skillLevel" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                                <option value="">All Levels</option>
                                <option value="beginner" selected="@(ViewBag.CurrentSkillLevel == "beginner")">Beginner</option>
                                <option value="casual" selected="@(ViewBag.CurrentSkillLevel == "casual")">Casual</option>
                                <option value="intermediate" selected="@(ViewBag.CurrentSkillLevel == "intermediate")">Intermediate</option>
                                <option value="competitive" selected="@(ViewBag.CurrentSkillLevel == "competitive")">Competitive</option>
                                <option value="advanced" selected="@(ViewBag.CurrentSkillLevel == "advanced")">Advanced</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                            <input type="date" name="matchDate" value="@(ViewBag.CurrentMatchDate?.ToString("yyyy-MM-dd"))"
                                   class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                        </div>

                        <button type="submit" class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 transition-colors">
                            Apply Filters
                        </button>
                    </div>
                    }
                </div>
            </div>

            <!-- Matches Section -->
            <div class="md:col-span-3">
                @if (!Model.Any())
                {
                <div class="bg-blue-50 text-blue-700 p-4 rounded-md">
                    @(isPersonal ? "You haven't created any matches yet." : "No matches available.")
                </div>
                }
                else
                {
                <div class="space-y-4">
                    @foreach (var match in Model)
                    {
                    @await Html.PartialAsync("_MatchCard", match)
                    }
                </div>
                }
            </div>
        </div>

        <!-- Mobile Filter Panel -->
        <div id="filterBackdrop" class="fixed inset-0 bg-black bg-opacity-50 z-[1000] hidden"></div>
        <div id="filterPanel" class="fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-[1001] transform translate-x-full transition-transform duration-300">
            <div class="p-4 h-full overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Filter Matches</h3>
                    <button onclick="hideFilterPanel()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <!-- We'll use the mobile filter form for this panel -->
            </div>
        </div>

        <!-- Create Match Modal -->
        <div id="createMatchModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
            <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold">Create New Match</h3>
                    <button onclick="hideCreateMatchModal()" class="text-gray-500 hover:text-gray-700">
                        <i class="fas fa-times"></i>
                    </button>
                </div>

                <form asp-controller="Match" asp-action="Create" method="post">
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Court Location</label>
                            <input type="text" name="CourtLocation" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Match Time</label>
                            <input type="datetime-local" name="MatchTime" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Match Type</label>
                            <select name="MatchType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                                <option value="singles" selected>Singles</option>
                                <option value="doubles">Doubles</option>
                                <option value="mixed">Mixed</option>
                            </select>
                        </div>
                        <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors">
                            Create Match
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    </div>

    @section Scripts {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                // Debug logging for create form
                console.log('Checking session storage...');
                console.log('shouldOpenCreateForm:', sessionStorage.getItem('shouldOpenCreateForm'));
                console.log('selectedCourtLocation:', sessionStorage.getItem('selectedCourtLocation'));

                const shouldOpenForm = sessionStorage.getItem('shouldOpenCreateForm');
                const courtLocation = sessionStorage.getItem('selectedCourtLocation');

                if (shouldOpenForm === 'true' && courtLocation) {
                    console.log('Should open form with location:', courtLocation);
                    showCreateMatchModal();

                    // Try both selectors to see which one works
                    let courtLocationInput = document.querySelector('input[name="CourtLocation"]');
                    if (!courtLocationInput) {
                        courtLocationInput = document.querySelector('#createMatchModal input[name="CourtLocation"]');
                    }

                    if (courtLocationInput) {
                        console.log('Found input field, setting value');
                        courtLocationInput.value = courtLocation;
                    } else {
                        console.error('Could not find court location input');
                    }

                    sessionStorage.removeItem('shouldOpenCreateForm');
                    sessionStorage.removeItem('selectedCourtLocation');
                }

                // Handle URL parameters for filtering
                const urlParams = new URLSearchParams(window.location.search);
                const courtLocationParam = urlParams.get('courtLocation');

                if (courtLocationParam) {
                    // Set the court location in the filter form
                    const filterInputs = document.querySelectorAll('input[name="courtLocation"]');
                    filterInputs.forEach(input => {
                        input.value = courtLocationParam;
                    });
                }

                // Existing modal handlers
                const createMatchModal = document.getElementById('createMatchModal');
                if (createMatchModal) {
                    createMatchModal.addEventListener('click', function (e) {
                        if (e.target === createMatchModal) {
                            hideCreateMatchModal();
                        }
                    });
                }

                // Add event listeners for the filter backdrop
                const filterBackdrop = document.getElementById('filterBackdrop');
                if (filterBackdrop) {
                    filterBackdrop.addEventListener('click', hideFilterPanel);
                }

                // Setup autocomplete for create match form and all filter location inputs
                setupRealCourtAutocomplete('input[name="CourtLocation"]');
                setupRealCourtAutocomplete('#desktopFilterLocation');
                setupRealCourtAutocomplete('#mobileFilterLocation');
            });

            // Function to setup autocomplete using real court data
            function setupRealCourtAutocomplete(inputSelector) {
                const input = document.querySelector(inputSelector);
                if (!input) {
                    console.error('Input not found:', inputSelector);
                    return;
                }

                console.log('Setting up real data autocomplete for:', inputSelector);

                // Create dropdown element
                const dropdown = document.createElement('div');
                dropdown.className = 'court-autocomplete-dropdown';
                dropdown.style.position = 'absolute';
                dropdown.style.backgroundColor = 'white';
                dropdown.style.border = '1px solid #ccc';
                dropdown.style.borderRadius = '4px';
                dropdown.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
                dropdown.style.zIndex = '9999';
                dropdown.style.maxHeight = '200px';
                dropdown.style.overflowY = 'auto';
                dropdown.style.display = 'none';
                dropdown.style.width = input.offsetWidth + 'px';

                // Add to document body
                document.body.appendChild(dropdown);

                // Position the dropdown
                function positionDropdown() {
                    const rect = input.getBoundingClientRect();
                    dropdown.style.top = (rect.bottom + window.scrollY) + 'px';
                    dropdown.style.left = (rect.left + window.scrollX) + 'px';
                    dropdown.style.width = rect.width + 'px';
                }

                // Function to fetch courts from the API
                async function fetchCourts(query) {
                    try {
                        console.log('Fetching courts with query:', query);
                        const response = await fetch(`/Map/Search?query=${encodeURIComponent(query)}`);

                        if (!response.ok) {
                            throw new Error(`API error: ${response.status}`);
                        }

                        const data = await response.json();
                        console.log('API returned courts:', data);
                        return data || [];
                    } catch (error) {
                        console.error('Error fetching courts:', error);
                        return [];
                    }
                }

                // Function to show the dropdown with results
                function showDropdown(courts) {
                    dropdown.innerHTML = '';

                    if (!courts || courts.length === 0) {
                        const noResults = document.createElement('div');
                        noResults.textContent = 'No courts found';
                        noResults.style.padding = '8px 12px';
                        noResults.style.color = '#666';
                        dropdown.appendChild(noResults);
                    } else {
                        courts.forEach(court => {
                            const option = document.createElement('div');
                            option.textContent = court.name;
                            option.style.padding = '8px 12px';
                            option.style.cursor = 'pointer';
                            option.style.borderBottom = '1px solid #eee';

                            option.addEventListener('mouseover', () => {
                                option.style.backgroundColor = '#f0f0f0';
                            });

                            option.addEventListener('mouseout', () => {
                                option.style.backgroundColor = 'white';
                            });

                            option.addEventListener('click', () => {
                                input.value = court.name;
                                dropdown.style.display = 'none';

                                // Trigger change event
                                const event = new Event('change', { bubbles: true });
                                input.dispatchEvent(event);
                            });

                            dropdown.appendChild(option);
                        });
                    }

                    positionDropdown();
                    dropdown.style.display = 'block';
                }

                // Setup debounce function
                let debounceTimer;

                // Input handler with debounce
                input.addEventListener('input', function () {
                    const query = this.value.trim();

                    clearTimeout(debounceTimer);

                    if (query.length >= 2) {
                        debounceTimer = setTimeout(async () => {
                            const courts = await fetchCourts(query);
                            showDropdown(courts);
                        }, 300);
                    } else {
                        dropdown.style.display = 'none';
                    }
                });

                // Handle clicks outside
                document.addEventListener('click', function (e) {
                    if (e.target !== input && e.target !== dropdown && !dropdown.contains(e.target)) {
                        dropdown.style.display = 'none';
                    }
                });

                // Update position on window resize
                window.addEventListener('resize', positionDropdown);

                // Add autocomplete=off to prevent browser autocomplete
                input.setAttribute('autocomplete', 'off');

                console.log('Real data autocomplete setup complete for:', inputSelector);
            }

            // Modal Functions
            function showCreateMatchModal() {
                const modal = document.getElementById('createMatchModal');
                if (modal) {
                    modal.classList.remove('hidden');
                    document.body.style.overflow = 'hidden';
                }
            }

            function hideCreateMatchModal() {
                const modal = document.getElementById('createMatchModal');
                if (modal) {
                    modal.classList.add('hidden');
                    document.body.style.overflow = '';
                }
            }

            // Delete Function
            function deleteMatch(matchId) {
                if (!matchId) {
                    console.error('No match ID provided');
                    return;
                }

                if (confirm('Are you sure you want to delete this match?')) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Match/Delete';

                    // Add anti-forgery token if it exists
                    const antiForgeryToken = document.querySelector('input[name="__RequestVerificationToken"]');
                    if (antiForgeryToken) {
                        const tokenInput = antiForgeryToken.cloneNode(true);
                        form.appendChild(tokenInput);
                    }

                    // Add match ID
                    const matchIdInput = document.createElement('input');
                    matchIdInput.type = 'hidden';
                    matchIdInput.name = 'matchId';
                    matchIdInput.value = matchId;
                    form.appendChild(matchIdInput);

                    // Add the form to the document and submit
                    document.body.appendChild(form);
                    form.submit();
                }
            }

            // Toggle Functions
            function toggleMobileFilter() {
                const filterForm = document.getElementById('mobileFilterForm');
                if (filterForm) {
                    filterForm.classList.toggle('hidden');
                }
            }

            // Improved toggleCard function for Index.cshtml Scripts section
            function toggleCard(id) {
                const content = document.getElementById('content-' + id);
                const icon = document.getElementById('icon-' + id);
                const contentInnerDiv = document.getElementById('content-inner-' + id);

                if (content && icon) {
                    content.classList.toggle('hidden');

                    // Update icon
                    if (content.classList.contains('hidden')) {
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    } else {
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');

                        // If the inner content doesn't have stored original content
                        // and isn't currently showing the form, load match requests
                        if (contentInnerDiv &&
                            !contentInnerDiv.getAttribute('data-original-content') &&
                            typeof loadMatchRequests === 'function') {

                            // Look for requests container to determine if we need to load requests
                            const requestsContainer = document.getElementById(`requests-${id}`);
                            if (requestsContainer) {
                                loadMatchRequests(id);
                            }
                        }
                    }
                }
            }
            function loadMatchRequests(matchId) {
                const requestsContainer = document.getElementById(`requests-${matchId}`);
                if (!requestsContainer) return;

                fetch(`/Match/GetMatchRequests?matchId=${matchId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && data.requests) {
                            // Clear loading message
                            requestsContainer.innerHTML = '';

                            if (data.requests.length === 0) {
                                requestsContainer.innerHTML = '<div class="text-center text-sm text-gray-500">No pending requests</div>';
                                return;
                            }

                            // Add each request to the container
                            data.requests.forEach(request => {
                                const requestElement = document.createElement('div');
                                requestElement.className = 'flex items-center justify-between bg-gray-50 p-3 rounded-md mb-2';

                                // Use name from request or fallback to requester ID
                                const requesterName = request.name || 'Unknown User';

                                requestElement.innerHTML = `
                        <div>
                            <span class="font-medium">${requesterName}</span>
                            <span class="ml-2 text-xs text-gray-500 bg-gray-200 px-1.5 py-0.5 rounded-full">
                                ${request.playerLevel || 'Unknown'}
                            </span>
                        </div>
                        <div class="flex gap-2">
                            <button onclick="respondToMatchRequest('${matchId}', '${request.id}', true)" 
                                    class="inline-flex items-center px-3 py-1 text-sm font-medium text-green-700 bg-green-50 rounded-md hover:bg-green-100">
                                Accept
                            </button>
                            <button onclick="respondToMatchRequest('${matchId}', '${request.id}', false)" 
                                    class="inline-flex items-center px-3 py-1 text-sm font-medium text-red-700 bg-red-50 rounded-md hover:bg-red-100">
                                Decline
                            </button>
                        </div>
                    `;
                                requestsContainer.appendChild(requestElement);
                            });
                        } else {
                            requestsContainer.innerHTML = '<div class="text-center text-sm text-red-500">Failed to load requests</div>';
                            console.error('Failed to load requests:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error loading requests:', error);
                        requestsContainer.innerHTML = '<div class="text-center text-sm text-red-500">Error loading requests</div>';
                    });
            }            function respondToMatchRequest(matchId, requesterId, accept) {
                // Prevent event bubbling
                if (event) event.stopPropagation();

                // Add debug logs
                console.log('Responding to match request:');
                console.log('- Match ID:', matchId);
                console.log('- Requester ID:', requesterId);
                console.log('- Accept:', accept);

                if (!matchId || !requesterId) {
                    console.error('Missing required parameters:', { matchId, requesterId });
                    alert('Missing required information. Cannot process request.');
                    return;
                }

                fetch('/Match/RespondToMatchRequest', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        matchId: matchId,
                        requesterId: requesterId,
                        accept: accept
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        console.log('Response data:', data);

                        if (data.success) {
                            // Reload the requests
                            loadMatchRequests(matchId);

                            // Show notification
                            const message = accept ? 'Request accepted successfully' : 'Request declined successfully';
                            const notification = document.createElement('div');
                            notification.className = 'fixed top-4 right-4 bg-white p-4 rounded-lg shadow-lg z-50 animate-fade-in';
                            notification.innerHTML = `
                <div class="flex items-start">
                    <div class="flex-shrink-0">
                        <i class="fas fa-${accept ? 'check-circle text-green-500' : 'times-circle text-red-500'}"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-gray-900">${message}</p>
                    </div>
                </div>
            `;
                            document.body.appendChild(notification);

                            // Remove notification after 3 seconds
                            setTimeout(() => {
                                notification.classList.add('animate-fade-out');
                                setTimeout(() => {
                                    notification.remove();
                                }, 300);
                            }, 3000);
                        } else {
                            console.error('Error response:', data);
                            alert(data.message || 'Failed to respond to request');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('An error occurred while responding to the request');
                    });
            }
            // Add this to enable request cancellation
            function cancelRequest(matchId) {
                if (confirm('Are you sure you want to cancel this request?')) {
                    fetch(`/Match/CancelRequest?matchId=${matchId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                window.location.reload();
                            } else {
                                alert(data.message || 'Failed to cancel request');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('An error occurred while canceling the request');
                        });
                }
            }
            function requestMatch(matchId) {
                // Prevent card toggle and default behavior
                event.stopPropagation();

                // Get button element
                const button = event.target.closest('button');
                const originalText = button.innerHTML;

                // Show loading state
                button.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Processing...';
                button.disabled = true;

                // Send request to your controller
                fetch(`/Match/RequestMatch?matchId=${matchId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            // Update button to show pending status
                            button.innerHTML = '<i class="fas fa-clock mr-2"></i>Request Pending';
                            button.classList.remove('bg-green-50', 'text-green-700', 'hover:bg-green-100');
                            button.classList.add('bg-yellow-50', 'text-yellow-700', 'hover:bg-yellow-100');
                            button.disabled = true;

                            // Show success message
                            const successMessage = document.createElement('div');
                            successMessage.className = 'mt-2 text-center text-sm text-green-600';
                            successMessage.textContent = 'Request sent successfully!';
                            button.parentNode.appendChild(successMessage);

                            // Remove message after 3 seconds
                            setTimeout(() => {
                                successMessage.remove();
                            }, 3000);
                        } else {
                            // Show error
                            button.innerHTML = originalText;
                            button.disabled = false;
                            alert(data.message || 'Failed to request match');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        button.innerHTML = originalText;
                        button.disabled = false;
                        alert('An error occurred while requesting the match');
                    });
            }
            function viewProfile(userId) {
                if (!userId) {
                    console.error('No user ID provided for profile view');
                    return;
                }
                // Prevent card toggle
                event.stopPropagation();

                // Navigate to profile page
                window.location.href = "/Profile/ViewProfile/" + userId;
            }

            function messageUser(userId, userName) {
                if (!userId) {
                    console.error('No user ID provided for messaging');
                    return;
                }
                // Prevent card toggle
                event.stopPropagation();

                // Navigate to new conversation page
                window.location.href = "/Social/NewConversation?userId=" + userId + "&userName=" + encodeURIComponent(userName);
            }


            // Filter Panel Functions
            function showFilterPanel() {
                const panel = document.getElementById('filterPanel');
                const backdrop = document.getElementById('filterBackdrop');

                if (!panel || !backdrop) {
                    console.error('Filter panel elements not found');
                    return;
                }

                backdrop.classList.remove('hidden');
                // Force a reflow
                panel.offsetHeight;
                requestAnimationFrame(() => {
                    panel.classList.remove('translate-x-full');
                });

                document.body.style.overflow = 'hidden';
            }

            function hideFilterPanel() {
                const panel = document.getElementById('filterPanel');
                const backdrop = document.getElementById('filterBackdrop');

                if (!panel || !backdrop) {
                    console.error('Filter panel elements not found');
                    return;
                }

                panel.classList.add('translate-x-full');

                setTimeout(() => {
                    backdrop.classList.add('hidden');
                    document.body.style.overflow = '';
                }, 300);
            }

            // Add these functions to your Index.cshtml's Scripts section

            // Add these functions to your Index.cshtml's Scripts section

            function editMatch(matchId) {
                // Prevent the card toggle
                event.stopPropagation();

                // Get both the outer and inner content divs
                const contentDiv = document.getElementById(`content-${matchId}`);
                const contentInnerDiv = document.getElementById(`content-inner-${matchId}`);

                // Store the original content for later restoration
                if (contentInnerDiv && !contentInnerDiv.getAttribute('data-original-content')) {
                    contentInnerDiv.setAttribute('data-original-content', contentInnerDiv.innerHTML);
                }

                // Ensure the card is expanded
                if (contentDiv) {
                    contentDiv.classList.remove('hidden');
                    // Update the chevron
                    const icon = document.getElementById(`icon-${matchId}`);
                    if (icon) {
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    }
                }

                // Show loading state in the inner div
                if (contentInnerDiv) {
                    contentInnerDiv.innerHTML = '<div class="p-4 text-center">Loading...</div>';
                }

                // Fetch the edit form
                fetch(`/Match/Edit/${matchId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }
                        return response.text();
                    })
                    .then(html => {
                        if (contentInnerDiv) {
                            contentInnerDiv.innerHTML = html;
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        if (contentInnerDiv) {
                            contentInnerDiv.innerHTML = '<div class="p-4 text-center text-red-600">Error loading edit form</div>';
                        }
                    });
            }

            // New function to close the edit form without collapsing the card
            function closeEditForm(matchId) {
                // Find the inner content div
                const contentInnerDiv = document.getElementById(`content-inner-${matchId}`);

                if (contentInnerDiv) {
                    // Restore original content from stored attribute
                    const originalContent = contentInnerDiv.getAttribute('data-original-content');
                    if (originalContent) {
                        contentInnerDiv.innerHTML = originalContent;
                        contentInnerDiv.removeAttribute('data-original-content');

                        // If the restored content has a requests container, reload the requests
                        const requestsContainer = document.getElementById(`requests-${matchId}`);
                        if (requestsContainer && typeof loadMatchRequests === 'function') {
                            loadMatchRequests(matchId);
                        }
                    }
                }
            }

            // Error handling helper
            function showError(message) {
                const errorDiv = document.createElement('div');
                errorDiv.className = 'bg-red-50 text-red-800 p-4 rounded-md mb-4';
                errorDiv.textContent = message;

                const container = document.querySelector('.container');
                if (container) {
                    container.insertBefore(errorDiv, container.firstChild);

                    // Remove after 5 seconds
                    setTimeout(() => {
                        errorDiv.remove();
                    }, 5000);
                }
            }
        </script>
    }
