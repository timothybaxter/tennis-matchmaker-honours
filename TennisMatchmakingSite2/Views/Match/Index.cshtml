@model List<TennisMatchmakingSite2.Models.MatchData>
    @{
    var isPersonal = ViewBag.IsPersonal ?? false;
    }

    <div class="container mx-auto px-4 pb-20">
        <div class="mt-4">
            <!-- Mobile View -->
            <div class="sm:hidden mt-16 mb-6">
                <h1 class="text-2xl font-bold text-center mb-4">@(isPersonal ? "My Matches" : "Available Matches")</h1>
                <div class="flex justify-between gap-2 px-2">
                    <a href="@(isPersonal ? @Url.Action("Index", "Match") : @Url.Action("Index", "Match", new { personal = true }))"
                       class="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md border transition-colors flex-1 justify-center
                     @(isPersonal ? "text-gray-700 bg-white border-gray-300 hover:bg-gray-50" : "text-blue-700 bg-blue-50 border-blue-200 hover:bg-blue-100")">
                        <i class="fas @(isPersonal ? "fa-globe" : "fa-user") mr-2"></i>
                        @(isPersonal ? "View All" : "My Matches")
                    </a>
                    <button onclick="showCreateMatchModal()"
                            class="inline-flex items-center px-3 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors flex-1 justify-center">
                        <i class="fas fa-plus mr-2"></i>
                        Create Match
                    </button>
                </div>
            </div>

            <!-- Desktop View -->
            <div class="hidden sm:flex justify-between items-center mb-6">
                <h1 class="text-2xl font-bold">@(isPersonal ? "My Matches" : "Available Matches")</h1>
                <div class="flex gap-4">
                    <a href="@(isPersonal ? @Url.Action("Index", "Match") : @Url.Action("Index", "Match", new { personal = true }))"
                       class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-md border transition-colors
                     @(isPersonal ? "text-gray-700 bg-white border-gray-300 hover:bg-gray-50" : "text-blue-700 bg-blue-50 border-blue-200 hover:bg-blue-100")">
                        <i class="fas @(isPersonal ? "fa-globe" : "fa-user") mr-2"></i>
                        @(isPersonal ? "View All Matches" : "My Matches")
                    </a>
                    <button onclick="showCreateMatchModal()"
                            class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700 transition-colors">
                        <i class="fas fa-plus mr-2"></i>
                        Create Match
                    </button>
                </div>
            </div>

            <!-- Mobile Filter Button and Form -->
            <div class="md:hidden mb-8">
                <button onclick="toggleMobileFilter()" type="button"
                        class="w-full bg-white text-gray-700 py-2 px-4 rounded-md hover:bg-gray-50 transition-colors flex items-center justify-center border border-gray-200">
                    <i class="fas fa-filter mr-2"></i>
                    Filter Matches
                </button>
                <div id="mobileFilterForm" class="hidden mt-2 bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                    @await Html.PartialAsync("_FilterForm")
                </div>
            </div>

            

            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                <!-- Desktop Filter Section -->
                <div class="hidden md:block md:col-span-1">
                    <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4">
                        <h2 class="font-semibold mb-4">Filter Matches</h2>
                        @await Html.PartialAsync("_FilterForm")
                    </div>
                </div>

                <!-- Matches Section -->
                <div class="md:col-span-3">
                    @if (!Model.Any())
                 {
                    <div class="bg-blue-50 text-blue-700 p-4 rounded-md">
                        @(isPersonal ? "You haven't created any matches yet." : "No matches available.")
                    </div>
                 }
                    else
                 {
                    <div class="space-y-4">
                        @foreach (var match in Model)
                {
                        @await Html.PartialAsync("_MatchCard", match)
                }
                    </div>
        }
                </div>
            </div>

    <!-- Mobile Filter Panel -->
    <div id="filterBackdrop" class="fixed inset-0 bg-black bg-opacity-50 z-[1000] hidden"></div>
    <div id="filterPanel" class="fixed inset-y-0 right-0 w-80 bg-white shadow-lg z-[1001] transform translate-x-full transition-transform duration-300">
        <div class="p-4 h-full overflow-y-auto">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Filter Matches</h3>
                <button onclick="hideFilterPanel()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            @await Html.PartialAsync("_FilterForm")
        </div>
    </div>

    <!-- Create Match Modal -->
    <div id="createMatchModal" class="hidden fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
        <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-lg font-semibold">Create New Match</h3>
                <button onclick="hideCreateMatchModal()" class="text-gray-500 hover:text-gray-700">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <form asp-controller="Match" asp-action="Create" method="post">
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Court Location</label>
                        <input type="text" name="CourtLocation" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Match Time</label>
                        <input type="datetime-local" name="MatchTime" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Match Type</label>
                        <select name="MatchType" class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" required>
                            <option value="">Select Type</option>
                            <option value="singles">Singles</option>
                            <option value="doubles">Doubles</option>
                            <option value="mixed">Mixed</option>
                        </select>
                    </div>
                    <button type="submit" class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors">
                        Create Match
                    </button>
                </div>
            </form>
        </div>
    </div>

    @section Scripts {
        <script>

            function toggleMobileFilter() {
                const filterForm = document.getElementById('mobileFilterForm');
                if (filterForm) {
                    filterForm.classList.toggle('hidden');
                }
            }
            // Filter Panel Functions
            function showFilterPanel() {
                const panel = document.getElementById('filterPanel');
                const backdrop = document.getElementById('filterBackdrop');

                if (!panel || !backdrop) {
                    console.error('Filter panel elements not found');
                    return;
                }

                backdrop.classList.remove('hidden');
                // Force a reflow
                panel.offsetHeight;
                requestAnimationFrame(() => {
                    panel.classList.remove('translate-x-full');
                });

                document.body.style.overflow = 'hidden';
            }

            function hideFilterPanel() {
                const panel = document.getElementById('filterPanel');
                const backdrop = document.getElementById('filterBackdrop');

                if (!panel || !backdrop) {
                    console.error('Filter panel elements not found');
                    return;
                }

                panel.classList.add('translate-x-full');

                setTimeout(() => {
                    backdrop.classList.add('hidden');
                    document.body.style.overflow = '';
                }, 300);
            }

            // Create Match Modal Functions
            function showCreateMatchModal() {
                const modal = document.getElementById('createMatchModal');
                if (!modal) return;

                modal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            }

            function hideCreateMatchModal() {
                const modal = document.getElementById('createMatchModal');
                if (!modal) return;

                modal.classList.add('hidden');
                document.body.style.overflow = '';
            }

            // Card Functions
            function toggleCard(id) {
                const content = document.getElementById('content-' + id);
                const icon = document.getElementById('icon-' + id);

                if (content && icon) {
                    content.classList.toggle('hidden');

                    if (content.classList.contains('hidden')) {
                        icon.classList.remove('fa-chevron-up');
                        icon.classList.add('fa-chevron-down');
                    } else {
                        icon.classList.remove('fa-chevron-down');
                        icon.classList.add('fa-chevron-up');
                    }
                }
            }

            function deleteMatch(matchId) {
                if (confirm('Are you sure you want to delete this match?')) {
                    const form = document.createElement('form');
                    form.method = 'POST';
                    form.action = '/Match/Delete';

                    const matchIdInput = document.createElement('input');
                    matchIdInput.type = 'hidden';
                    matchIdInput.name = 'matchId';
                    matchIdInput.value = matchId;

                    form.appendChild(matchIdInput);
                    document.body.appendChild(form);
                    form.submit();
                }
            }

            function messageUser(userName) {
                alert('Messaging functionality coming soon');
            }

            function requestMatch(matchId) {
                alert('Match request functionality coming soon');
            }

            // Event Listeners
            document.addEventListener('DOMContentLoaded', function () {
                const modal = document.getElementById('createMatchModal');
                const backdrop = document.getElementById('filterBackdrop');

                if (modal) {
                    modal.addEventListener('click', function (e) {
                        if (e.target === modal) {
                            hideCreateMatchModal();
                        }
                    });
                }

                if (backdrop) {
                    backdrop.addEventListener('click', hideFilterPanel);
                }
            });
        </script>
    }
